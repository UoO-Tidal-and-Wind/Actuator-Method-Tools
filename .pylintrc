[MASTER]
# Python 3.8 compatibility
python-version=3.8
# Load the required plugins, including pylint type-checking plugin
load-plugins=pylint_django,pylint_typecheck

[MESSAGES CONTROL]
# Enable/disable specific warnings, errors, and refactors
disable=missing-docstring, invalid-name  # Disable these specific warnings for readability

[FORMAT]
# Max allowed line length
max-line-length=88  # Align with the Black code style

# Naming conventions
good-names=i,j,k,ex,Run,_,db,logger
# This section will enforce snake_case for functions and variables, and CamelCase for classes
# You can customize it by adding common variable/function names or excluding others.
# If you have any special cases for names you want to allow, add them under good-names

[DESIGN]
# Function and method complexity
max-args=5
max-returns=2
max-branches=12
min-public-methods=1
max-public-methods=20

[DOCSTRING]
# Use Google-style docstrings, with docstring length of at least 10 characters
docstring-style=google
min-docstring-length=10

# Check for function and class docstrings
check-docstrings=yes

[TYPECHECK]
# Enable type checking (for functions that use type hints)
enable=all
# Specify that functions/methods should have type annotations
# Pylint will issue a warning if type annotations are missing.
# If you want to enforce type annotations across all functions, add more specific rules.
# Example: `typecheck-asserts=yes`

# Optional: Ignore typing issues in third-party packages
ignored-modules=numpy,pandas

[LOGGING]
# Enforce the use of logging over print statements
logging-modules=logging
# Enforce the correct usage of logging with the logger name
log-handler-level=DEBUG

[REPORTS]
# Disable the full HTML report (for more concise output)
output-format=text
reports=no

[IMPORTS]
# Import conventions
# This will enforce absolute imports for external libraries and relative imports for internal ones
# If you want to use relative imports for internal modules, ensure their paths are correctly defined
# For example, `from .module import something`
# Absolute imports are preferred for external libraries
no-relative-imports=no

[PERFORMANCE]
# Optional performance checks
# This is a good section to add checks to ensure NumPy's vectorization is used properly
# For example, ensure that list comprehensions and loops are not used unnecessarily when NumPy's vectorized operations can be leveraged.
# We can include specific checks using Pylint's built-in rules, though advanced profiling tools aren't always part of Pylint itself
enable=vectorized-imports

[TESTING]
# Ensure the use of pytest in the tests directory
test-frames=yes
test-duplicates=yes
test-dir=tests
# If you have unit tests with pytest, this section will ensure that the right framework is used and files are located in the correct directory.

